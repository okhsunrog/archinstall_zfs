name: Build ISO

on:
  # Trigger on version tags like v0.1.0
  push:
    tags:
      - 'v*'
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      kernel:
        description: 'Kernel to build (linux, linux-lts, or both)'
        required: true
        default: 'both'
        type: choice
        options:
          - linux
          - linux-lts
          - both

permissions:
  contents: write

jobs:
  build-iso:
    runs-on: ubuntu-latest
    container:
      image: archlinux:latest
      options: --privileged  # Required for archiso

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install system dependencies
      run: |
        pacman -Syu --noconfirm
        pacman -S --noconfirm archiso git base-devel just rsync grub sudo nodejs uv

    - name: Set kernel for build
      run: |
        if [ "${{ github.event_name }}" = "push" ]; then
          echo "KERNEL=both" >> $GITHUB_ENV
        else
          echo "KERNEL=${{ github.event.inputs.kernel || 'both' }}" >> $GITHUB_ENV
        fi

    - name: Build ISO with linux kernel (pre-built ZFS, fallback to DKMS)
      if: env.KERNEL == 'linux' || env.KERNEL == 'both'
      run: |
        echo "Building linux kernel ISO..."
        
        # Try pre-built ZFS first
        if just build-main pre linux; then
          echo "Successfully built with pre-built ZFS modules"
        else
          echo "Pre-built ZFS failed, trying DKMS..."
          just build-main dkms linux
        fi

    - name: Build ISO with linux-lts kernel (pre-built ZFS, fallback to DKMS)
      if: env.KERNEL == 'linux-lts' || env.KERNEL == 'both'
      run: |
        echo "Building linux-lts kernel ISO..."
        
        # Try pre-built ZFS first
        if just build-main pre linux-lts; then
          echo "Successfully built with pre-built ZFS modules"
        else
          echo "Pre-built ZFS failed, trying DKMS..."
          just build-main dkms linux-lts
        fi

    - name: Find and list built ISOs
      run: |
        echo "Built ISOs:"
        ls -la gen_iso/out/
        
        # Find all ISO files
        ISO_FILES=$(find gen_iso/out/ -name "*.iso" | sort)
        if [ -z "$ISO_FILES" ]; then
          echo "Error: No ISO files found!"
          exit 1
        fi
        
        echo "ISO_FILES=$ISO_FILES" >> $GITHUB_ENV
        echo "Found ISOs:"
        for iso in $ISO_FILES; do
          echo "  $iso ($(du -h $iso | cut -f1))"
        done

    - name: Generate checksums
      run: |
        cd gen_iso/out
        # Generate individual checksum files for each ISO
        for iso in *.iso; do
          if [ -f "$iso" ]; then
            echo "Generating checksum for $iso..."
            sha256sum "$iso" > "${iso}.sha256"
            cat "${iso}.sha256"
          fi
        done

    # Create a release automatically on tag push and upload assets
    - name: Create GitHub Release (tag push) and upload assets
      if: github.event_name == 'push'
      uses: softprops/action-gh-release@v2
      with:
        generate_release_notes: true
        files: |
          gen_iso/out/*.iso
          gen_iso/out/*.sha256
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}