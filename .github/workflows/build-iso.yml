name: Build ISO

on:
  # Trigger on version tags like v0.1.0
  push:
    tags:
      - 'v*'
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      kernel:
        description: 'Kernel to build (linux, linux-lts, or both)'
        required: true
        default: 'both'
        type: choice
        options:
          - linux
          - linux-lts
          - both

permissions:
  contents: write

jobs:
  build-iso:
    runs-on: ubuntu-latest
    container:
      image: archlinux:latest
      options: --privileged  # Required for archiso

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install system dependencies
      run: |
        pacman -Syu --noconfirm
        pacman -S --noconfirm archiso base-devel git grub just nodejs parted python-pyparted rsync sudo uv

    - name: Setup Python environment
      run: |
        uv venv
        source .venv/bin/activate
        uv pip install jinja2

    - name: Set kernel for build
      run: |
        if [ "${{ github.event_name }}" = "push" ]; then
          echo "KERNEL=both" >> $GITHUB_ENV
        else
          echo "KERNEL=${{ github.event.inputs.kernel || 'both' }}" >> $GITHUB_ENV
        fi

    - name: Build ISO with linux kernel (pre-built ZFS, fallback to DKMS)
      if: env.KERNEL == 'linux' || env.KERNEL == 'both'
      continue-on-error: true
      run: |
        echo "Building linux kernel ISO..."
        source .venv/bin/activate
        
        # Try pre-built ZFS first
        if just build-main pre linux; then
          echo "Successfully built with pre-built ZFS modules"
        else
          echo "Pre-built ZFS failed, trying DKMS..."
          if just build-main dkms linux; then
            echo "Successfully built with DKMS"
          else
            echo "WARNING: linux kernel build failed (likely due to ZFS compatibility)"
            echo "This is expected when the latest linux kernel is newer than ZFS supports"
            exit 1
          fi
        fi

    - name: Build ISO with linux-lts kernel (pre-built ZFS, fallback to DKMS)
      if: env.KERNEL == 'linux-lts' || env.KERNEL == 'both'
      run: |
        echo "Building linux-lts kernel ISO..."
        source .venv/bin/activate
        
        # Try pre-built ZFS first
        if just build-main pre linux-lts; then
          echo "Successfully built with pre-built ZFS modules"
        else
          echo "Pre-built ZFS failed, trying DKMS..."
          just build-main dkms linux-lts
        fi

    - name: Find and list built ISOs
      run: |
        echo "Built ISOs:"
        ls -la gen_iso/out/ || echo "No gen_iso/out directory found"
        
        # Find all ISO files
        ISO_FILES=$(find gen_iso/out/ -name "*.iso" 2>/dev/null | sort | tr '\n' ' ')
        if [ -z "$ISO_FILES" ]; then
          echo "Warning: No ISO files found!"
          echo "This may be expected if linux kernel build failed due to ZFS compatibility"
          
          # Only fail if we were specifically trying to build just linux kernel
          if [ "$KERNEL" = "linux" ]; then
            echo "Error: Expected linux ISO but none found"
            exit 1
          else
            echo "Continuing - linux-lts build may have succeeded"
          fi
        else
          echo "Found ISOs:"
          for iso in $(find gen_iso/out/ -name "*.iso" | sort); do
            echo "  $iso ($(du -h $iso | cut -f1))"
          done
        fi

    - name: Generate checksums
      run: |
        if [ -d "gen_iso/out" ] && [ "$(ls -A gen_iso/out/*.iso 2>/dev/null)" ]; then
          cd gen_iso/out
          # Generate individual checksum files for each ISO
          for iso in *.iso; do
            if [ -f "$iso" ]; then
              echo "Generating checksum for $iso..."
              sha256sum "$iso" > "${iso}.sha256"
              cat "${iso}.sha256"
            fi
          done
        else
          echo "No ISOs found, skipping checksum generation"
        fi

    # Create a release automatically on tag push and upload assets
    - name: Create GitHub Release (tag push) and upload assets
      if: github.event_name == 'push'
      uses: softprops/action-gh-release@v2
      with:
        generate_release_notes: true
        files: |
          gen_iso/out/*.iso
          gen_iso/out/*.sha256
        fail_on_unmatched_files: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
